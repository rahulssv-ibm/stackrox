// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/v1/runtime_config_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuntimeConfigService_GetRuntimeConfig_FullMethodName    = "/v1.RuntimeConfigService/GetRuntimeConfig"
	RuntimeConfigService_PatchRuntimeConfig_FullMethodName  = "/v1.RuntimeConfigService/PatchRuntimeConfig"
	RuntimeConfigService_DryRunRuntimeConfig_FullMethodName = "/v1.RuntimeConfigService/DryRunRuntimeConfig"
)

// RuntimeConfigServiceClient is the client API for RuntimeConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RuntimeConfigService can be used to update and check the runtime config
type RuntimeConfigServiceClient interface {
	GetRuntimeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRuntimeConfigResponse, error)
	PatchRuntimeConfig(ctx context.Context, in *RuntimeConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	DryRunRuntimeConfig(ctx context.Context, in *RuntimeConfigRequest, opts ...grpc.CallOption) (*DryRunRuntimeConfigResponse, error)
}

type runtimeConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeConfigServiceClient(cc grpc.ClientConnInterface) RuntimeConfigServiceClient {
	return &runtimeConfigServiceClient{cc}
}

func (c *runtimeConfigServiceClient) GetRuntimeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRuntimeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuntimeConfigResponse)
	err := c.cc.Invoke(ctx, RuntimeConfigService_GetRuntimeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeConfigServiceClient) PatchRuntimeConfig(ctx context.Context, in *RuntimeConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RuntimeConfigService_PatchRuntimeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeConfigServiceClient) DryRunRuntimeConfig(ctx context.Context, in *RuntimeConfigRequest, opts ...grpc.CallOption) (*DryRunRuntimeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DryRunRuntimeConfigResponse)
	err := c.cc.Invoke(ctx, RuntimeConfigService_DryRunRuntimeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeConfigServiceServer is the server API for RuntimeConfigService service.
// All implementations should embed UnimplementedRuntimeConfigServiceServer
// for forward compatibility.
//
// RuntimeConfigService can be used to update and check the runtime config
type RuntimeConfigServiceServer interface {
	GetRuntimeConfig(context.Context, *Empty) (*GetRuntimeConfigResponse, error)
	PatchRuntimeConfig(context.Context, *RuntimeConfigRequest) (*Empty, error)
	DryRunRuntimeConfig(context.Context, *RuntimeConfigRequest) (*DryRunRuntimeConfigResponse, error)
}

// UnimplementedRuntimeConfigServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimeConfigServiceServer struct{}

func (UnimplementedRuntimeConfigServiceServer) GetRuntimeConfig(context.Context, *Empty) (*GetRuntimeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeConfig not implemented")
}
func (UnimplementedRuntimeConfigServiceServer) PatchRuntimeConfig(context.Context, *RuntimeConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRuntimeConfig not implemented")
}
func (UnimplementedRuntimeConfigServiceServer) DryRunRuntimeConfig(context.Context, *RuntimeConfigRequest) (*DryRunRuntimeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DryRunRuntimeConfig not implemented")
}
func (UnimplementedRuntimeConfigServiceServer) testEmbeddedByValue() {}

// UnsafeRuntimeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeConfigServiceServer will
// result in compilation errors.
type UnsafeRuntimeConfigServiceServer interface {
	mustEmbedUnimplementedRuntimeConfigServiceServer()
}

func RegisterRuntimeConfigServiceServer(s grpc.ServiceRegistrar, srv RuntimeConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedRuntimeConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuntimeConfigService_ServiceDesc, srv)
}

func _RuntimeConfigService_GetRuntimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeConfigServiceServer).GetRuntimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeConfigService_GetRuntimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeConfigServiceServer).GetRuntimeConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeConfigService_PatchRuntimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuntimeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeConfigServiceServer).PatchRuntimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeConfigService_PatchRuntimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeConfigServiceServer).PatchRuntimeConfig(ctx, req.(*RuntimeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeConfigService_DryRunRuntimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuntimeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeConfigServiceServer).DryRunRuntimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeConfigService_DryRunRuntimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeConfigServiceServer).DryRunRuntimeConfig(ctx, req.(*RuntimeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeConfigService_ServiceDesc is the grpc.ServiceDesc for RuntimeConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RuntimeConfigService",
	HandlerType: (*RuntimeConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuntimeConfig",
			Handler:    _RuntimeConfigService_GetRuntimeConfig_Handler,
		},
		{
			MethodName: "PatchRuntimeConfig",
			Handler:    _RuntimeConfigService_PatchRuntimeConfig_Handler,
		},
		{
			MethodName: "DryRunRuntimeConfig",
			Handler:    _RuntimeConfigService_DryRunRuntimeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/runtime_config_service.proto",
}
