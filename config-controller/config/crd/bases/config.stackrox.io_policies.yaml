---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: policies.config.stackrox.io
spec:
  group: config.stackrox.io
  names:
    kind: Policy
    listKind: PolicyList
    plural: policies
    singular: policy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Policy is the Schema for the policies API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: 'Next tag: 28'
            properties:
              SORT_enforcement:
                description: For internal use only.
                type: boolean
              SORT_lifecycleStage:
                description: For internal use only.
                type: string
              SORT_name:
                description: For internal use only.
                type: string
              categories:
                items:
                  type: string
                type: array
              criteria_locked:
                description: Read-only field. If true, the policy's criteria fields
                  are rendered read-only.
                type: boolean
              description:
                type: string
              disabled:
                type: boolean
              enforcement_actions:
                description: |-
                  FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.
                  FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.
                  FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.
                items:
                  format: int32
                  type: integer
                type: array
              event_source:
                format: int32
                type: integer
              exclusions:
                items:
                  properties:
                    deployment:
                      properties:
                        name:
                          type: string
                        scope:
                          properties:
                            cluster:
                              type: string
                            label:
                              properties:
                                key:
                                  type: string
                                value:
                                  type: string
                              type: object
                            namespace:
                              type: string
                          type: object
                      type: object
                    expiration:
                      description: "A Timestamp represents a point in time independent
                        of any time zone or local\ncalendar, encoded as a count of
                        seconds and fractions of seconds at\nnanosecond resolution.
                        The count is relative to an epoch at UTC midnight on\nJanuary
                        1, 1970, in the proleptic Gregorian calendar which extends
                        the\nGregorian calendar backwards to year one.\n\n\nAll minutes
                        are 60 seconds long. Leap seconds are \"smeared\" so that
                        no leap\nsecond table is needed for interpretation, using
                        a [24-hour linear\nsmear](https://developers.google.com/time/smear).\n\n\nThe
                        range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
                        By\nrestricting to that range, we ensure that we can convert
                        to and from [RFC\n3339](https://www.ietf.org/rfc/rfc3339.txt)
                        date strings.\n\n\n# Examples\n\n\nExample 1: Compute Timestamp
                        from POSIX `time()`.\n\n\n\tTimestamp timestamp;\n\ttimestamp.set_seconds(time(NULL));\n\ttimestamp.set_nanos(0);\n\n\nExample
                        2: Compute Timestamp from POSIX `gettimeofday()`.\n\n\n\tstruct
                        timeval tv;\n\tgettimeofday(&tv, NULL);\n\n\n\tTimestamp timestamp;\n\ttimestamp.set_seconds(tv.tv_sec);\n\ttimestamp.set_nanos(tv.tv_usec
                        * 1000);\n\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n\n\tFILETIME
                        ft;\n\tGetSystemTimeAsFileTime(&ft);\n\tUINT64 ticks = (((UINT64)ft.dwHighDateTime)
                        << 32) | ft.dwLowDateTime;\n\n\n\t// A Windows tick is 100
                        nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n\t// is 11644473600
                        seconds before Unix epoch 1970-01-01T00:00:00Z.\n\tTimestamp
                        timestamp;\n\ttimestamp.set_seconds((INT64) ((ticks / 10000000)
                        - 11644473600LL));\n\ttimestamp.set_nanos((INT32) ((ticks
                        % 10000000) * 100));\n\n\nExample 4: Compute Timestamp from
                        Java `System.currentTimeMillis()`.\n\n\n\tlong millis = System.currentTimeMillis();\n\n\n\tTimestamp
                        timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n\t
                        \   .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\nExample
                        5: Compute Timestamp from Java `Instant.now()`.\n\n\n\tInstant
                        now = Instant.now();\n\n\n\tTimestamp timestamp =\n\t    Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n\t
                        \       .setNanos(now.getNano()).build();\n\n\nExample 6:
                        Compute Timestamp from current time in Python.\n\n\n\ttimestamp
                        = Timestamp()\n\ttimestamp.GetCurrentTime()\n\n\n# JSON Mapping\n\n\nIn
                        JSON format, the Timestamp type is encoded as a string in
                        the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format.
                        That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere
                        {year} is always expressed using four digits while {month},
                        {day},\n{hour}, {min}, and {sec} are zero-padded to two digits
                        each. The fractional\nseconds, which can go up to 9 digits
                        (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\"
                        suffix indicates the timezone (\"UTC\"); the timezone\nis
                        required. A proto3 JSON serializer should always use UTC (as
                        indicated by\n\"Z\") when printing the Timestamp type and
                        a proto3 JSON parser should be\nable to accept both UTC and
                        other timezones (as indicated by an offset).\n\n\nFor example,
                        \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30
                        UTC on January 15, 2017.\n\n\nIn JavaScript, one can convert
                        a Date object to this format using the\nstandard\n[toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\nmethod.
                        In Python, a standard `datetime.datetime` object can be converted\nto
                        this format using\n[`strftime`](https://docs.python.org/2/library/time.html#time.strftime)
                        with\nthe time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise,
                        in Java, one can use\nthe Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n)
                        to obtain a formatter capable of generating timestamps in
                        this format."
                      properties:
                        nanos:
                          description: |-
                            Non-negative fractions of a second at nanosecond resolution. Negative
                            second values with fractions must still have non-negative nanos values
                            that count forward in time. Must be from 0 to 999,999,999
                            inclusive.
                          format: int32
                          type: integer
                        seconds:
                          description: |-
                            Represents seconds of UTC time since Unix epoch
                            1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
                            9999-12-31T23:59:59Z inclusive.
                          format: int64
                          type: integer
                      type: object
                    image:
                      properties:
                        name:
                          type: string
                      type: object
                    name:
                      type: string
                  type: object
                type: array
              id:
                type: string
              is_default:
                description: Read-only field. Indicates the policy is a default policy
                  if true and a custom policy if false.
                type: boolean
              last_updated:
                description: "A Timestamp represents a point in time independent of
                  any time zone or local\ncalendar, encoded as a count of seconds
                  and fractions of seconds at\nnanosecond resolution. The count is
                  relative to an epoch at UTC midnight on\nJanuary 1, 1970, in the
                  proleptic Gregorian calendar which extends the\nGregorian calendar
                  backwards to year one.\n\n\nAll minutes are 60 seconds long. Leap
                  seconds are \"smeared\" so that no leap\nsecond table is needed
                  for interpretation, using a [24-hour linear\nsmear](https://developers.google.com/time/smear).\n\n\nThe
                  range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
                  By\nrestricting to that range, we ensure that we can convert to
                  and from [RFC\n3339](https://www.ietf.org/rfc/rfc3339.txt) date
                  strings.\n\n\n# Examples\n\n\nExample 1: Compute Timestamp from
                  POSIX `time()`.\n\n\n\tTimestamp timestamp;\n\ttimestamp.set_seconds(time(NULL));\n\ttimestamp.set_nanos(0);\n\n\nExample
                  2: Compute Timestamp from POSIX `gettimeofday()`.\n\n\n\tstruct
                  timeval tv;\n\tgettimeofday(&tv, NULL);\n\n\n\tTimestamp timestamp;\n\ttimestamp.set_seconds(tv.tv_sec);\n\ttimestamp.set_nanos(tv.tv_usec
                  * 1000);\n\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n\n\tFILETIME
                  ft;\n\tGetSystemTimeAsFileTime(&ft);\n\tUINT64 ticks = (((UINT64)ft.dwHighDateTime)
                  << 32) | ft.dwLowDateTime;\n\n\n\t// A Windows tick is 100 nanoseconds.
                  Windows epoch 1601-01-01T00:00:00Z\n\t// is 11644473600 seconds
                  before Unix epoch 1970-01-01T00:00:00Z.\n\tTimestamp timestamp;\n\ttimestamp.set_seconds((INT64)
                  ((ticks / 10000000) - 11644473600LL));\n\ttimestamp.set_nanos((INT32)
                  ((ticks % 10000000) * 100));\n\n\nExample 4: Compute Timestamp from
                  Java `System.currentTimeMillis()`.\n\n\n\tlong millis = System.currentTimeMillis();\n\n\n\tTimestamp
                  timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n\t
                  \   .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\nExample
                  5: Compute Timestamp from Java `Instant.now()`.\n\n\n\tInstant now
                  = Instant.now();\n\n\n\tTimestamp timestamp =\n\t    Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n\t
                  \       .setNanos(now.getNano()).build();\n\n\nExample 6: Compute
                  Timestamp from current time in Python.\n\n\n\ttimestamp = Timestamp()\n\ttimestamp.GetCurrentTime()\n\n\n#
                  JSON Mapping\n\n\nIn JSON format, the Timestamp type is encoded
                  as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
                  format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere
                  {year} is always expressed using four digits while {month}, {day},\n{hour},
                  {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds,
                  which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare
                  optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the
                  timezone\nis required. A proto3 JSON serializer should always use
                  UTC (as indicated by\n\"Z\") when printing the Timestamp type and
                  a proto3 JSON parser should be\nable to accept both UTC and other
                  timezones (as indicated by an offset).\n\n\nFor example, \"2017-01-15T01:30:15.01Z\"
                  encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\n\nIn
                  JavaScript, one can convert a Date object to this format using the\nstandard\n[toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\nmethod.
                  In Python, a standard `datetime.datetime` object can be converted\nto
                  this format using\n[`strftime`](https://docs.python.org/2/library/time.html#time.strftime)
                  with\nthe time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in
                  Java, one can use\nthe Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n)
                  to obtain a formatter capable of generating timestamps in this format."
                properties:
                  nanos:
                    description: |-
                      Non-negative fractions of a second at nanosecond resolution. Negative
                      second values with fractions must still have non-negative nanos values
                      that count forward in time. Must be from 0 to 999,999,999
                      inclusive.
                    format: int32
                    type: integer
                  seconds:
                    description: |-
                      Represents seconds of UTC time since Unix epoch
                      1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
                      9999-12-31T23:59:59Z inclusive.
                    format: int64
                    type: integer
                type: object
              lifecycle_stages:
                items:
                  format: int32
                  type: integer
                type: array
              mitre_attack_vectors:
                items:
                  properties:
                    tactic:
                      type: string
                    techniques:
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              mitre_vectors_locked:
                description: Read-only field. If true, the policy's MITRE ATT&CK fields
                  are rendered read-only.
                type: boolean
              name:
                type: string
              notifiers:
                items:
                  type: string
                type: array
              policy_sections:
                items:
                  properties:
                    policy_groups:
                      items:
                        properties:
                          boolean_operator:
                            format: int32
                            type: integer
                          field_name:
                            type: string
                          negate:
                            type: boolean
                          values:
                            items:
                              properties:
                                value:
                                  type: string
                              type: object
                            type: array
                        type: object
                      type: array
                    section_name:
                      type: string
                  type: object
                type: array
              policy_version:
                type: string
              rationale:
                type: string
              remediation:
                type: string
              scope:
                items:
                  properties:
                    cluster:
                      type: string
                    label:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      type: object
                    namespace:
                      type: string
                  type: object
                type: array
              severity:
                format: int32
                type: integer
              source:
                format: int32
                type: integer
            type: object
          status:
            description: PolicyStatus defines the observed state of Policy
            properties:
              accepted:
                type: boolean
              message:
                type: string
            required:
            - accepted
            - message
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
