// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/client.go -source client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	client "github.com/stackrox/rox/config-controller/pkg/client"
	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockCachedPolicyClient is a mock of CachedPolicyClient interface.
type MockCachedPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockCachedPolicyClientMockRecorder
}

// MockCachedPolicyClientMockRecorder is the mock recorder for MockCachedPolicyClient.
type MockCachedPolicyClientMockRecorder struct {
	mock *MockCachedPolicyClient
}

// NewMockCachedPolicyClient creates a new mock instance.
func NewMockCachedPolicyClient(ctrl *gomock.Controller) *MockCachedPolicyClient {
	mock := &MockCachedPolicyClient{ctrl: ctrl}
	mock.recorder = &MockCachedPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachedPolicyClient) EXPECT() *MockCachedPolicyClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCachedPolicyClient) Create(ctx context.Context, policy *storage.Policy) (*storage.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, policy)
	ret0, _ := ret[0].(*storage.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCachedPolicyClientMockRecorder) Create(ctx, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCachedPolicyClient)(nil).Create), ctx, policy)
}

// EnsureFresh mocks base method.
func (m *MockCachedPolicyClient) EnsureFresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureFresh indicates an expected call of EnsureFresh.
func (mr *MockCachedPolicyClientMockRecorder) EnsureFresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFresh", reflect.TypeOf((*MockCachedPolicyClient)(nil).EnsureFresh), ctx)
}

// FlushCache mocks base method.
func (m *MockCachedPolicyClient) FlushCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushCache indicates an expected call of FlushCache.
func (mr *MockCachedPolicyClientMockRecorder) FlushCache(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushCache", reflect.TypeOf((*MockCachedPolicyClient)(nil).FlushCache), ctx)
}

// Get mocks base method.
func (m *MockCachedPolicyClient) Get(ctx context.Context, name string) (*storage.Policy, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*storage.Policy)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCachedPolicyClientMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCachedPolicyClient)(nil).Get), ctx, name)
}

// List mocks base method.
func (m *MockCachedPolicyClient) List(ctx context.Context) ([]*storage.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*storage.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCachedPolicyClientMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCachedPolicyClient)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockCachedPolicyClient) Update(ctx context.Context, policy *storage.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCachedPolicyClientMockRecorder) Update(ctx, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCachedPolicyClient)(nil).Update), ctx, policy)
}

// MockPolicyClient is a mock of PolicyClient interface.
type MockPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyClientMockRecorder
}

// MockPolicyClientMockRecorder is the mock recorder for MockPolicyClient.
type MockPolicyClientMockRecorder struct {
	mock *MockPolicyClient
}

// NewMockPolicyClient creates a new mock instance.
func NewMockPolicyClient(ctrl *gomock.Controller) *MockPolicyClient {
	mock := &MockPolicyClient{ctrl: ctrl}
	mock.recorder = &MockPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyClient) EXPECT() *MockPolicyClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPolicyClient) Get(ctx context.Context, id string) (*storage.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*storage.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyClientMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicyClient)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockPolicyClient) List(arg0 context.Context) ([]*storage.ListPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*storage.ListPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPolicyClientMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPolicyClient)(nil).List), arg0)
}

// Post mocks base method.
func (m *MockPolicyClient) Post(arg0 context.Context, arg1 *storage.Policy) (*storage.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(*storage.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockPolicyClientMockRecorder) Post(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockPolicyClient)(nil).Post), arg0, arg1)
}

// Put mocks base method.
func (m *MockPolicyClient) Put(arg0 context.Context, arg1 *storage.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockPolicyClientMockRecorder) Put(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockPolicyClient)(nil).Put), arg0, arg1)
}

// MockclientOptions is a mock of clientOptions interface.
type MockclientOptions struct {
	ctrl     *gomock.Controller
	recorder *MockclientOptionsMockRecorder
}

// MockclientOptionsMockRecorder is the mock recorder for MockclientOptions.
type MockclientOptionsMockRecorder struct {
	mock *MockclientOptions
}

// NewMockclientOptions creates a new mock instance.
func NewMockclientOptions(ctrl *gomock.Controller) *MockclientOptions {
	mock := &MockclientOptions{ctrl: ctrl}
	mock.recorder = &MockclientOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientOptions) EXPECT() *MockclientOptionsMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockclientOptions) Apply(arg0 client.CachedPolicyClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", arg0)
}

// Apply indicates an expected call of Apply.
func (mr *MockclientOptionsMockRecorder) Apply(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockclientOptions)(nil).Apply), arg0)
}
