syntax = "proto3";

package v1;

import "api/v1/commonapi/runtime_config.proto";
import "api/v1/empty.proto";
import weak "google/api/annotations.proto";

option go_package = "./api/v1;v1";
option java_package = "io.stackrox.proto.api.v1";

message GetRuntimeConfigResponse {
  commonapi.RuntimeConfigs runtime_config = 1;
}

message RuntimeConfigRequest {
  commonapi.RuntimeConfigs runtime_config = 1;
}

message DryRunRuntimeConfigResponse {
  message Resource {
    string cluster = 1;
    string namespace = 2;
  }

  message StatusWithResources {
    commonapi.Status status = 1;
    repeated Resource resources = 2;
  }

  message StatusesForFeature {
    commonapi.RuntimeFeature runtime_feature = 1;
    repeated StatusWithResources status_with_resources = 2;
  }
  repeated StatusesForFeature statuses_for_features = 1;
}

// RuntimeConfigService can be used to update and check the runtime config
service RuntimeConfigService {
  rpc GetRuntimeConfig(Empty) returns (GetRuntimeConfigResponse) {
    option (google.api.http) = {get: "/v1/runtime_config"};
  }

  rpc PostRuntimeConfig(RuntimeConfigRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/runtime_config"
      body: "*"
    };
  }

  rpc PatchRuntimeConfig(RuntimeConfigRequest) returns (Empty) {
    option (google.api.http) = {
      patch: "/v1/runtime_config"
      body: "*"
    };
  }

  rpc DryRunRuntimeConfig(RuntimeConfigRequest) returns (DryRunRuntimeConfigResponse) {
    option (google.api.http) = {
      post: "/v1/runtime_config/dryrun"
      body: "*"
    };
  }
}
