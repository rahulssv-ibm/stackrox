// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/manager.go -source manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	central "github.com/stackrox/rox/generated/internalapi/central"
	sensor "github.com/stackrox/rox/generated/internalapi/sensor"
	centralsensor "github.com/stackrox/rox/pkg/centralsensor"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	timestamp "github.com/stackrox/rox/pkg/timestamp"
	common "github.com/stackrox/rox/sensor/common"
	message "github.com/stackrox/rox/sensor/common/message"
	manager "github.com/stackrox/rox/sensor/common/networkflow/manager"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockManager) Capabilities() []centralsensor.SensorCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].([]centralsensor.SensorCapability)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockManagerMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockManager)(nil).Capabilities))
}

// CollectorConfigValueStream mocks base method.
func (m *MockManager) CollectorConfigValueStream() concurrency.ReadOnlyValueStream[*sensor.CollectorConfig] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectorConfigValueStream")
	ret0, _ := ret[0].(concurrency.ReadOnlyValueStream[*sensor.CollectorConfig])
	return ret0
}

// CollectorConfigValueStream indicates an expected call of CollectorConfigValueStream.
func (mr *MockManagerMockRecorder) CollectorConfigValueStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorConfigValueStream", reflect.TypeOf((*MockManager)(nil).CollectorConfigValueStream))
}

// ExternalSrcsValueStream mocks base method.
func (m *MockManager) ExternalSrcsValueStream() concurrency.ReadOnlyValueStream[*sensor.IPNetworkList] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalSrcsValueStream")
	ret0, _ := ret[0].(concurrency.ReadOnlyValueStream[*sensor.IPNetworkList])
	return ret0
}

// ExternalSrcsValueStream indicates an expected call of ExternalSrcsValueStream.
func (mr *MockManagerMockRecorder) ExternalSrcsValueStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalSrcsValueStream", reflect.TypeOf((*MockManager)(nil).ExternalSrcsValueStream))
}

// Notify mocks base method.
func (m *MockManager) Notify(e common.SensorComponentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", e)
}

// Notify indicates an expected call of Notify.
func (mr *MockManagerMockRecorder) Notify(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockManager)(nil).Notify), e)
}

// ProcessMessage mocks base method.
func (m *MockManager) ProcessMessage(msg *central.MsgToSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockManagerMockRecorder) ProcessMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockManager)(nil).ProcessMessage), msg)
}

// PublicIPsValueStream mocks base method.
func (m *MockManager) PublicIPsValueStream() concurrency.ReadOnlyValueStream[*sensor.IPAddressList] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicIPsValueStream")
	ret0, _ := ret[0].(concurrency.ReadOnlyValueStream[*sensor.IPAddressList])
	return ret0
}

// PublicIPsValueStream indicates an expected call of PublicIPsValueStream.
func (mr *MockManagerMockRecorder) PublicIPsValueStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicIPsValueStream", reflect.TypeOf((*MockManager)(nil).PublicIPsValueStream))
}

// RegisterCollector mocks base method.
func (m *MockManager) RegisterCollector(hostname string) (manager.HostNetworkInfo, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCollector", hostname)
	ret0, _ := ret[0].(manager.HostNetworkInfo)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// RegisterCollector indicates an expected call of RegisterCollector.
func (mr *MockManagerMockRecorder) RegisterCollector(hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCollector", reflect.TypeOf((*MockManager)(nil).RegisterCollector), hostname)
}

// ResponsesC mocks base method.
func (m *MockManager) ResponsesC() <-chan *message.ExpiringMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponsesC")
	ret0, _ := ret[0].(<-chan *message.ExpiringMessage)
	return ret0
}

// ResponsesC indicates an expected call of ResponsesC.
func (mr *MockManagerMockRecorder) ResponsesC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesC", reflect.TypeOf((*MockManager)(nil).ResponsesC))
}

// Start mocks base method.
func (m *MockManager) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockManager) Stop(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", err)
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop), err)
}

// UnregisterCollector mocks base method.
func (m *MockManager) UnregisterCollector(hostname string, sequenceID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterCollector", hostname, sequenceID)
}

// UnregisterCollector indicates an expected call of UnregisterCollector.
func (mr *MockManagerMockRecorder) UnregisterCollector(hostname, sequenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterCollector", reflect.TypeOf((*MockManager)(nil).UnregisterCollector), hostname, sequenceID)
}

// MockHostNetworkInfo is a mock of HostNetworkInfo interface.
type MockHostNetworkInfo struct {
	ctrl     *gomock.Controller
	recorder *MockHostNetworkInfoMockRecorder
}

// MockHostNetworkInfoMockRecorder is the mock recorder for MockHostNetworkInfo.
type MockHostNetworkInfoMockRecorder struct {
	mock *MockHostNetworkInfo
}

// NewMockHostNetworkInfo creates a new mock instance.
func NewMockHostNetworkInfo(ctrl *gomock.Controller) *MockHostNetworkInfo {
	mock := &MockHostNetworkInfo{ctrl: ctrl}
	mock.recorder = &MockHostNetworkInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostNetworkInfo) EXPECT() *MockHostNetworkInfoMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockHostNetworkInfo) Process(networkInfo *sensor.NetworkConnectionInfo, nowTimestamp timestamp.MicroTS, sequenceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", networkInfo, nowTimestamp, sequenceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockHostNetworkInfoMockRecorder) Process(networkInfo, nowTimestamp, sequenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockHostNetworkInfo)(nil).Process), networkInfo, nowTimestamp, sequenceID)
}
