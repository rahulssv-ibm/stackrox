// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/service.go -source service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	sensor "github.com/stackrox/rox/generated/internalapi/sensor"
	concurrency "github.com/stackrox/rox/pkg/concurrency"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AuthFuncOverride mocks base method.
func (m *MockService) AuthFuncOverride(ctx context.Context, fullMethodName string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthFuncOverride", ctx, fullMethodName)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthFuncOverride indicates an expected call of AuthFuncOverride.
func (mr *MockServiceMockRecorder) AuthFuncOverride(ctx, fullMethodName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthFuncOverride", reflect.TypeOf((*MockService)(nil).AuthFuncOverride), ctx, fullMethodName)
}

// Communicate mocks base method.
func (m *MockService) Communicate(arg0 grpc.BidiStreamingServer[sensor.NetworkConnectionInfoMessage, sensor.MsgToCollector]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Communicate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Communicate indicates an expected call of Communicate.
func (mr *MockServiceMockRecorder) Communicate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Communicate", reflect.TypeOf((*MockService)(nil).Communicate), arg0)
}

// PushNetworkConnectionInfo mocks base method.
func (m *MockService) PushNetworkConnectionInfo(arg0 grpc.BidiStreamingServer[sensor.NetworkConnectionInfoMessage, sensor.NetworkFlowsControlMessage]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushNetworkConnectionInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushNetworkConnectionInfo indicates an expected call of PushNetworkConnectionInfo.
func (mr *MockServiceMockRecorder) PushNetworkConnectionInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushNetworkConnectionInfo", reflect.TypeOf((*MockService)(nil).PushNetworkConnectionInfo), arg0)
}

// RegisterServiceHandler mocks base method.
func (m *MockService) RegisterServiceHandler(arg0 context.Context, arg1 *runtime.ServeMux, arg2 *grpc.ClientConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterServiceHandler", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterServiceHandler indicates an expected call of RegisterServiceHandler.
func (mr *MockServiceMockRecorder) RegisterServiceHandler(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServiceHandler", reflect.TypeOf((*MockService)(nil).RegisterServiceHandler), arg0, arg1, arg2)
}

// RegisterServiceServer mocks base method.
func (m *MockService) RegisterServiceServer(server *grpc.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterServiceServer", server)
}

// RegisterServiceServer indicates an expected call of RegisterServiceServer.
func (mr *MockServiceMockRecorder) RegisterServiceServer(server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServiceServer", reflect.TypeOf((*MockService)(nil).RegisterServiceServer), server)
}

// SendCollectorConfig mocks base method.
func (m *MockService) SendCollectorConfig(stream sensor.NetworkConnectionInfoService_CommunicateServer, iter concurrency.ValueStreamIter[*sensor.CollectorConfig]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCollectorConfig", stream, iter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCollectorConfig indicates an expected call of SendCollectorConfig.
func (mr *MockServiceMockRecorder) SendCollectorConfig(stream, iter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCollectorConfig", reflect.TypeOf((*MockService)(nil).SendCollectorConfig), stream, iter)
}
